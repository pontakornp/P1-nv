syntax = "proto3";
option java_package = "edu.usfca.cs.dfs";

// 1. Register Storage Node

message StorageNode {
	string storageNodeId = 1;
	string storageNodeAddr = 2;
	int32 storageNodePort = 3;
	int32 currentStorageValue = 4;
	int32 maxStorageValue = 5;
	repeated string replicationNodeIds = 6;
}

message StorageNodeRegisterRequest {
    StorageNode storageNode = 1;
}

message StorageNodeRegisterAck {
	StorageNode storageNode = 1;
}

// 2. Get nodes for chunk store
message PrimaryStorageNodeRequest {
	string fileName = 1;
	//int32 maxChunk = 2;
	//bool isMetaData = 3;

	int32 chunkId = 2;
	int32 chunkSize = 3;
}

message PrimaryStorageNodeResponse {
    repeated ChunkMapping chunkMappings = 1;
}

message ChunkMapping {
	string fileName = 1;
	int32 chunkId = 2;
	repeated StorageNode storageNodeObjs = 3;
}


message PrimaryStorageNodeAck {
    string fileName = 1;
}


// 3. Store chunk
message StoreChunkRequest {
    string fileName = 1;
    int32 chunkId = 2;
    bytes data = 3;
    string checksum = 4;
    int32 chunkSize = 5;
}

message StoreChunkAck {
    string fileName = 1;
    int32 chunkId = 2;
}

// 5. Get nodes for retrieve chunk


message AllStorageNodeRequest {
    string fileName = 1;
    int32 maxChunk = 2;
    bool isMetaData = 3;
}

message AllStorageNodeResponse {
    repeated ChunkMapping chunkMappings = 1;
}

message AllStorageNodeAck {
    string fileName = 1;
}

// 6. Retrieve chunk

message RetrieveChunkRequest {
    string fileName = 1;
}

message RetrieveChunkResponse {
    string fileName = 1;
    int32 maxChunk = 2;
    bool isMetaData = 3;
}

message RetrieveChunkAck {
    string fileName = 1;
    int32 chunkId = 2;
}

message MessageWrapper {
    int32 messageType = 1;
    StorageNodeRegisterRequest storageNodeRegisterRequest = 2;
    StorageNodeRegisterAck storageNodeRegisterAck = 3;
    PrimaryStorageNodeRequest primaryStorageNodeRequest = 4;
    PrimaryStorageNodeResponse primaryStorageNodeResponse = 5;
    PrimaryStorageNodeAck primaryStorageNodeAck = 6;
    StoreChunkRequest storeChunkRequest = 7;
    StoreChunkAck storeChunkAck = 8;
    AllStorageNodeRequest allStorageNodeRequest = 9;
    AllStorageNodeResponse allStorageNodeResponse = 10;
    AllStorageNodeAck allStorageNodeAck = 11;
    RetrieveChunkRequest retrieveChunkRequest = 12;
    RetrieveChunkResponse retrieveChunkResponse = 13;
    RetrieveChunkAck retrieveChunkAck = 14;
}


/*
message MessageWrapper {
	int32 messageType = 1;
	GetPrimaryStorageNode getPrimaryStorageNodeMsg = 2;
    StoreChunk storeChunkMsg = 3;
    StorageNode storageNodeMsg = 4;

    RetrieveFile retrieveFileMsg = 5;
    StorageNodeRegisterAck storageNodeRegisterAckMsg = 6;

    RetrieveChunk retrieveChunkMsg = 5;
}
*/
